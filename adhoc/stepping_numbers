# A number is called stepping number if all adjacent digits have an absolute
# difference of 1, e.g. '321', '323' is a Stepping Number while 421 is not.
# Given two integers n and m, find the count of all the stepping
# numbers in range [n, m].

# Algorithm: using DFS.
# Explanation:
# Source: https://www.careercup.com/question?id=5693006426406912
# l_size, h_size = no. of digits in low and high resp.
# We reproduce all the stepping number between digits l_size and h_size, we disgard any number if it is out of range.
# Following is the way to reproduce
# First number (MSB) can be 1 to 9.
# To the partially constructed number so far, we will append next digit(LSB) once by last_digit+1 and other time last_digit-1
# (corner case) If last_digit was 9 or 0, then only 8 or 1 (resp) can be append.
# We follow above recursively, till we reach the required length of number.


import math

def dfs(low, high, size, num, ans):
  if size == 1:
    if low<=num<=high:
      ans.append(num)
    return

  last_digit = num%10
  if last_digit == 0:
    dfs(low, high, size-1, num*10+1, ans)
  elif last_digit == 9:
    dfs(low, high, size-1, num*10+8, ans)
  else:
    dfs(low, high, size-1, num*10+last_digit+1, ans)
    dfs(low, high, size-1, num*10+last_digit-1, ans)

for _ in range(int(input())):
    low, high = input().split(' ')
    low, high = int(low), int(high)
    l_size = h_size = 1
    if low > 9:
      l_size = int(math.log(low, 10))+1
    if high > 9:
      h_size = int(math.log(high, 10))+1
    
    ans = []
    if low<=0<=high:
        ans.append(0)
    for size in range(l_size, h_size+1):
      for digit in range(1,10):
        dfs(low, high, size, digit, ans)
    
    print (len(ans))
